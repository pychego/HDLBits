#include <cmath>
#include "upDirectSolution.h"
#include "unstable.h"

using namespace std;

void upMLP(float x[6], float y[6])
{

    // Neural Network Constants
    float x1_step1_xoffset[6] = {
        16.7114017841965,
        12.0739578160106,
        14.5355318705666,
        18.1928815420524,
        17.0020315920168,
        16.9069975646786};
    float x1_step1_gain[6] = {
        0.0670068176096368,
        0.0550177896719063,
        0.0620090635565999,
        0.068863716625108,
        0.0641539507581763,
        0.0663675494053508};
    float x1_step1_ymin = -1;

    float b1[10] = {
        0.72921831753231092232,
        -0.78644408083887817895,
        0.62315768030931206756,
        -0.82081496098074635537,
        0.88507024108066423285,
        0.83866507273901502728,
        -0.85093938017763526283,
        -0.80100801550574451948,
        -0.6364492428976594729,
        -0.86168525358455483332};

    float IW1_1[10][6] = {
        {0.032281830214889714603, -0.1977563926729249133, 0.3162615615849047046, 0.097801315670613037101, -0.43975038707125768678, 0.074355365493116026832},
        {0.12619101182946412809, -0.55232850386143594879, 0.24610856833553887424, 0.42935471478341291629, -0.33856032704990629556, 0.13375045710749686179},
        {0.4466421245496186021, -0.47992165514392792769, 0.26464022763338707067, 0.13775207887763155079, -0.10782910891576043266, -0.21238046078334288369},
        {-0.010236913060561379091, 0.070836244458764199838, 0.037422454757662156066, 0.3312695326772648885, -0.046333902445807477466, 0.011403716359884798551},
        {0.17516937015297553981, 0.037792058424554755836, -0.38085120214362405688, -0.09016335175450063133, 0.22577560034813529133, -0.49960262915888442592},
        {-0.031062920460886649099, 0.062071244823479719555, -0.12608522583196196676, -0.22537505171719912633, 0.085062427204635665534, -0.071116540888683230093},
        {-0.018705990001727037381, -0.088306698411534420567, 0.2994617495914530525, 0.091702744550726147943, -0.044067208019408637965, 0.15102791472820539798},
        {0.10811526888701165905, -0.19846880458031074257, 0.12253407026646907785, 0.32426524960794866903, -0.21468314303896773865, 0.11167648254650104633},
        {-0.22823685369546453661, 0.31137357333993853636, -0.18963578869420677497, -0.09314945555204337535, 0.09874296224509064579, 0.10722425991256130662},
        {0.089204497504266996866, -0.42105149373449796135, 0.21981194901545600406, 0.21752805115042087025, -0.15508149375235269485, 0.049388999145321486883}};
    float b2[6] = {
        11.581426145328601152,
        13.033452870455134232,
        20.648749110331273471,
        -46.156534743851530322,
        102.75920461078341361,
        -36.927995636749145092};
    float LW2_1[6][10] = {
        {-3.3808023460325369314, -17.458857234591537377, -0.64193628311133943409, 8.9932081382406874326, 1.8380292237833351088, 27.491250289293528652, -2.5475993927473594702, 25.885818987103789368, 1.7494310288702601408, 25.837095006169818134},
        {2.1845949034433087554, -24.972968030832120689, 9.2389686391637653173, 5.8767430630367671895, 1.0035433688811881137, 67.742889673384368621, 12.750307299479079148, 53.559086165557602044, 23.409750746154760037, 30.720124463419569594},
        {2.5077474916404374206, -4.9992413997612299426, 11.310520540042276139, -18.614168317026212662, 1.6104151481262531931, -58.799889455928678217, -10.548137733574616703, -12.773465397402860688, 25.565322982425463749, 9.0166969693926422025},
        {-7.5012194576124056056, 57.559337455503481351, -71.878675484794840145, -67.682446967732602161, -19.769534124259486418, -348.81028858500843626, -108.98027807689543067, -172.75917539727643657, -165.3887822113735524, -75.290515079928127307},
        {2.497504757130896369, -95.027183607049920511, 26.435390561790182318, 30.877834531172219101, 2.9854011808861096178, 145.20524006026678876, 28.455792202451586803, 91.299799669758016307, 98.373226938799490426, 180.79872908863734438},
        {-15.231498916612949301, 7.3147253628475592535, -34.2408807512857436, -14.317625069291391782, 12.843287736478892214, 15.409378734163162505, 42.844915473688075735, 2.2408029518431100691, -89.00686341254203171, -31.364622783405486928}};
    float y1_step1_ymin = -1;
    float y1_step1_gain[6] = {
        0.100058216474039,
        0.100042209769961,
        0.0767198445976001,
        0.125043935714938,
        0.12511108315945,
        0.125013948738569};
    float y1_step1_xoffset[6] = {
        -9.98986778941481,
        -9.99646707926827,
        18.9288038773833,
        -7.9988589108703,
        -7.99721893881631,
        -7.99994473411403};

    // Simulation
    int Q = 1; // Number of samples

    // Input 1
    // 输入length归一化 mapminmax_apply
    float xp1[6]; // 归一化输入
    for (int i = 0; i < 6; i++)
    {
        xp1[i] = (x[i] - x1_step1_xoffset[i]) * x1_step1_gain[i] + x1_step1_ymin;
    }
    // 到此没有问题

    // Layer 1
    // tansig_apply
    float a1[10]; // 第一层输出
    for (int i = 0; i < 10; i++)
    {
        float sum = b1[i];
        for (int j = 0; j < 6; j++)
        {
            sum += IW1_1[i][j] * xp1[j];
        }
        a1[i] = 2.0 / (1.0 + exp(-2.0 * sum)) - 1.0;
    }
    // 输出a1的值是正确的

    // Layer 2 and output
    // 第二层输出并进行反归一化 mapminmax_reverse
    // float a2[6];    // 第二层输出y
    for (int i = 0; i < 6; i++)
    {
        float sum = b2[i];
        for (int j = 0; j < 10; j++)
        {
            sum += LW2_1[i][j] * a1[j];
        }
        y[i] = (sum - y1_step1_ymin) / y1_step1_gain[i] + y1_step1_xoffset[i];
    }
}
