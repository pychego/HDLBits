#include <cmath>
#include "DirectSolution.h"
#include "unstable.h"

using namespace std;

// 适用于紫金港的六自由度平台MLP参数
void MLP(float x[6], float y[6])
{

    // Neural Network Constants
    float x1_step1_xoffset[6] = {
        109.58118760323f,
        108.63574084852f,
        110.87319264705f,
        110.031382622355f,
        110.524400094624f,
        111.142075920911f};
    float x1_step1_gain[6] = {
        0.0436728749833488f,
        0.0448602098159905f,
        0.0453973233477171f,
        0.0467614434609741f,
        0.0466517832192418f,
        0.0467330710401307f};
    float x1_step1_ymin = -1;

    float b1[10] = {
        0.77277039116679102637f,
        0.42739298003131148684f,
        -0.34982620323276603092f,
        -0.26550452015728137622f,
        -0.30613309005857958223f,
        -0.75343165221747465665f,
        -0.76002737759993743705f,
        -0.37645325357201264715f,
        0.34274021152215505825f,
        -0.51398384033920607727f};
    float IW1_1[10][6] = {
        {-0.43492067797249928107f, 0.18758726113975179861f, -0.0046109247536585224944f, 0.037384092062558264835f, -0.26213105878396447679f, 0.32056030179208255815f},
        {-0.17149299944030674259f, 0.14649082178849948122f, -0.24114881096034404551f, 0.27328360618574970564f, -0.079057232416944053788f, 0.088917474058887280286f},
        {0.03011217649009336611f, -0.040469657865076100189f, 0.1296146464292899092f, 0.024349074372830209478f, 0.0054480420591105117867f, 0.035556809887771621825f},
        {-0.034424218525775873712f, 0.036237449161263222963f, -0.17556337101540694934f, 0.14721491705156380947f, -0.16313452104486816929f, 0.16635944729947005349f},
        {0.014236848864705199669f, -0.002481541459652601006f, 0.092883040113746984101f, -0.012635431942537017971f, 0.051227931412415141088f, 0.039607829714155384782f},
        {-0.53360382179074350439f, 0.81054365604969769166f, -0.28380080318030703745f, 0.28659204317431569153f, -0.25133127303617053272f, 0.1761672277010863652f},
        {0.54320999143826820266f, -0.26353975311593186293f, 0.016363680489686789621f, -0.052623683165233865744f, 0.34695667473619079546f, -0.42002496851438825276f},
        {-0.03659402612557823703f, 0.052780728868074250348f, -0.17663920295564261576f, 0.14383894146694520266f, -0.20827530941801558617f, 0.19797453949817891972f},
        {0.01945716993066505876f, -0.025481843134749642549f, -0.073229522441612904249f, 0.053186348483129100573f, -0.095761762694907076598f, -0.052778947880951054827f},
        {0.22483276349996295096f, -0.20778235422339055849f, 0.25298282808571709301f, -0.26812936710453555422f, 0.071663093963966362221f, -0.079492267995392676405f}};
    float b2[6] = {
        -7.8022855259484131807f,
        -2.5749865400925027181f,
        -5.4318549734269563345f,
        -8.1323826195780046788f,
        -4.8084601557951751616f,
        -7.9870035289132168543f};
    float LW2_1[6][10] = {
        {49.088373698461218453f, 8.0865746611244411213f, 20.003269765121103774f, 11.576804584405769205f, -27.474527828288685782f, -1.78893190658901724f, 30.806459673450721226f, -10.612190107164042985f, -17.585523231591203341f, 10.487817613790850757f},
        {6.8170739927810091174f, 24.774434705482963892f, -26.894572845269497208f, -33.564956358748432308f, 3.7883516122503326784f, -0.57690029369381434776f, 3.4659316104144086701f, 25.729249480828976004f, -23.632658352123740997f, 20.297810809702461654f},
        {12.227022474138584229f, 3.5209440991125062759f, -56.849899345080601165f, 3.5240225850663255969f, 129.00195221456672812f, -0.32094803289813916836f, 7.0493126539626516092f, -4.5336701194794963854f, 60.621870859366438822f, 2.2906445064997829064f},
        {18.407030523625316221f, -2.391232045628955305f, -7.9835215343261234366f, -32.283137524818513953f, 26.383510332013720756f, 0.066931019085029033744f, 13.074671415091675186f, 22.29340791976152758f, 18.833868107048459706f, -8.7037518740713135657f},
        {9.1421817145279948846f, 23.970511659472354182f, 11.339203612161321999f, 16.668489326990876265f, -27.139899465738267281f, 0.31893699265831032541f, 6.7657383903160583927f, -21.803347059773191319f, -14.894614713379814575f, 19.309067681165945629f},
        {22.368698501701679504f, -22.628987547705463612f, -32.215850471445556025f, 35.402785378642789738f, 75.333389692411358851f, 0.76546484223885502551f, 13.759964838780202712f, -26.622244445650508737f, 41.401073610241219569f, -19.63111210566486875f}};
    float y1_step1_ymin = -1;
    float y1_step1_gain[6] = {
        0.100004446451972f,
        0.100010965884879f,
        0.100021723683379f,
        0.100004028155627f,
        0.10004512398831f,
        0.10001981559523f};

    float y1_step1_xoffset[6] = {
        -9.9995902378381f,
        -9.99915746685034f,
        110.002244040949f,
        -9.99986918468605f,
        -9.99611182192612f,
        -9.99674140430338f};

    // Simulation
    int Q = 1; // Number of samples

    // Input 1
    // 输入length归一化 mapminmax_apply
    float xp1[6]; // 归一化输入
    for (int i = 0; i < 6; i++)
    {
        xp1[i] = (x[i] - x1_step1_xoffset[i]) * x1_step1_gain[i] + x1_step1_ymin;
    }
    // 到此没有问题

    // Layer 1
    // tansig_apply
    float a1[10]; // 第一层输出
    for (int i = 0; i < 10; i++)
    {
        float sum = b1[i];
        for (int j = 0; j < 6; j++)
        {
            sum += IW1_1[i][j] * xp1[j];
        }
        a1[i] = 2.0 / (1.0 + exp(-2.0 * sum)) - 1.0;
    }
    // 输出a1的值是正确的

    // Layer 2 and output
    // 第二层输出并进行反归一化 mapminmax_reverse
    // float a2[6];    // 第二层输出y
    for (int i = 0; i < 6; i++)
    {
        float sum = b2[i];
        for (int j = 0; j < 10; j++)
        {
            sum += LW2_1[i][j] * a1[j];
        }
        y[i] = (sum - y1_step1_ymin) / y1_step1_gain[i] + y1_step1_xoffset[i];
    }
}
