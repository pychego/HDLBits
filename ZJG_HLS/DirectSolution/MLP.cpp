#include <cmath>
#include "DirectSolution.h"
#include "unstable.h"

using namespace std;

// 适用于紫金港的六自由度平台MLP参数
void downMLP(float x[6], float y[6])
{

    // Neural Network Constants
    float x1_step1_xoffset[6] = {136.519041875713, 135.70791925391, 134.740106892569, 137.507719555635, 137.534734876664, 138.175248557892};
    float x1_step1_gain[6] = {0.0351258157697374, 0.0344192314223015, 0.0328909796401714, 0.0357571997146803, 0.0366655839366231, 0.0344772619925066};
    float x1_step1_ymin = -1;

    float b1[10] = {0.058609633070954791911, 0.49421741042740086058, -0.25806811508785781895, -0.29537203168633829886, 0.67698655191031487099, -0.24702937016334142184, 0.72968586713210836781, -0.46425914248883004554, 0.88897048591065574996, 0.62843649190135530969};
    float IW1_1[10][6] = {
        {0.11028296319271317649f, -0.12591900399141667255f, 0.043865696092558942309f, -0.062981041306631443955f, 0.10645083885119173417f, -0.10454495431682520046f},
        {0.16110940133383386264f, -0.21448395710967793626f, 0.15423338789882709565f, -0.14808705763334004124f, 0.078494958175727158611f, -0.066858400610526030894f},
        {0.083604512243478465439f, -0.11895833502638852863f, 0.077056756534567588668f, -0.050088751655939241225f, 0.13568790525725002438f, -0.13264760017574164785f},
        {-0.014636026214219246405f, 0.016302107163760449354f, 0.051916255652697529399f, -0.01756973884837327235f, 0.07241126198981578943f, 0.10044794796595976627f},
        {0.23589812007214905343f, -0.21920802827233387688f, 0.33624658004622459684f, -0.37014215281151963133f, 0.13317918682100848837f, -0.19852236161732927933f},
        {0.016241536974514282632f, -0.00073106846245339065973f, 0.072417657373052238268f, 0.0017484225285567063426f, 0.061848276046471993561f, 0.057777770981256137972f},
        {-0.00096307121820986914176f, 0.092736342414445713245f, -0.1772246671581619859f, 0.0027496973106191308425f, -0.022389034465653798872f, -0.07083625383231376138f},
        {0.068094218444874732299f, -0.10693602428969693763f, 0.11488584760814604668f, -0.079105148175410935907f, 0.1690004933829927225f, -0.15583292430256234784f},
        {-1.1810944828152172281f, -0.20928321903800947701f, 0.45925977335945999958f, 0.057149880688061295564f, -0.34580835491267364334f, 0.58327926962880716211f},
        {0.21340356869288465425f, -0.21773528677160422506f, 0.25867892496012112602f, -0.27322692730100850422f, 0.093485592071689327387f, -0.12991638593392648704f}};

    float b2[6] = {9.5608816437965273849, 2.1616147659128892577, -4.0689008414734884056, 1.0759436470213439296, 6.4281219498728532358, -2.0180048041580693763};
    float LW2_1[6][10] = {
        {-50.104090848218802989f, 44.965574900512223167f, 37.298046554466111502f, 29.91477831302438517f, 12.338932830443706479f, -40.716802517095985081f, -16.743857988559682326f, -8.1198734921335926629f, 0.3464422140581474574f, -34.982784065175174248f},
        {20.281557137354308651f, 7.8785288972473077607f, -50.269866177873936408f, 51.098128571346059346f, 17.942989547320621568f, -42.669841566725438042f, 11.330563224695884728f, 39.54233710956945913f, 0.13106453201038520406f, -28.536160993632865512f},
        {-2.8359935990977236386f, 3.2693449016128894868f, 0.66618088310281731168f, -17.9442611476370395f, 1.9457265160181724806f, 39.883679755291154834f, 11.200908944601936312f, -2.68690991244058619f, 0.16173531642270719266f, -3.5351953363844472733f},
        {-34.900239412433286645f, 0.85137815456575538509f, 31.077019560451638824f, -8.1811050092027084446f, -1.070170940621989697f, 7.0153176239892651722f, 5.0496978741222671161f, -4.3658732873149688203f, -0.070977536968116802796f, 6.0441410544140659056f},
        {-20.681468793444114596f, 5.6872185374288957149f, 54.380240508691322532f, 15.921083376094847139f, 9.9464377313872205377f, -19.066120293718817891f, -4.2910197787518953305f, -29.588997942118481888f, -0.064166456364588897454f, -18.163021673969662828f},
        {-17.704605822903026535f, -13.691588184534834838f, 38.912564461415954042f, 10.263983060483957033f, -13.924850986906040617f, -8.983249303727603774f, 3.7139069620367011204f, -25.626508075977287859f, 0.28994765320435866851f, 26.160019851752910114f}};

    float y1_step1_ymin = -1;
    float y1_step1_gain[6] = {0.100012971486658, 0.100022047084771, 0.100071634271316, 0.100020845014417, 0.100018910189218, 0.10001304575209};
    float y1_step1_xoffset[6] = {-9.9976019367443, -9.99842405506194, 139.500067281524, -9.99865388533147, -9.9999214478096, -9.99967096106465};

    // Simulation
    int Q = 1; // Number of samples

    // Input 1
    // 输入length归一化 mapminmax_apply
    float xp1[6]; // 归一化输入
    for (int i = 0; i < 6; i++)
    {
        xp1[i] = (x[i] - x1_step1_xoffset[i]) * x1_step1_gain[i] + x1_step1_ymin;
    }
    // 到此没有问题

    // Layer 1
    // tansig_apply
    float a1[10]; // 第一层输出
    for (int i = 0; i < 10; i++)
    {
        float sum = b1[i];
        for (int j = 0; j < 6; j++)
        {
            sum += IW1_1[i][j] * xp1[j];
        }
        a1[i] = 2.0 / (1.0 + exp(-2.0 * sum)) - 1.0;
    }
    // 输出a1的值是正确的

    // Layer 2 and output
    // 第二层输出并进行反归一化 mapminmax_reverse
    // float a2[6];    // 第二层输出y
    for (int i = 0; i < 6; i++)
    {
        float sum = b2[i];
        for (int j = 0; j < 10; j++)
        {
            sum += LW2_1[i][j] * a1[j];
        }
        y[i] = (sum - y1_step1_ymin) / y1_step1_gain[i] + y1_step1_xoffset[i];
    }
}
